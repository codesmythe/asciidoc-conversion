#!/usr/bin/env python -tt
# -*- coding: utf-8 -*-

# Copyright (c) 2015 Rob Gowin 

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os, sys, logging, re, subprocess

# These tables are to map generic chapter names as generated out of the XSL stylesheet
# to the chapter names as used by the existing GnuCash DocBook XML.

guide_chapter_names = {
    "C" : { 
        "ch01": "ch_oview",
        "ch02": "ch_basics",
        "ch03": "ch_accts",
        "ch04": "ch_txns",
        "ch05": "ch_cbook",
        "ch06": "ch_cc",
        "ch07": "ch_loans",
        "ch08": "ch_invest",
        "ch09": "ch_capgain",
        "ch10": "ch_currency",
        "ch11": "ch_dep",
        "ch12": "ch_bus_ar",
        "ch13": "ch_bus_ap",
        "ch14": "ch_bus_pay",
        "ch15": "ch_budgets",
        "ch16": "ch_oth_assets",
        "ch17": "ch_python_bindings",
        "ch18": "ch_import_business_data",
        "ch19": "ch_reports",
        "appa": "appendixa",
        "appb": "appendixb",
        "appc": "appendixc",
        "appd": "appendixd",
        "appe": "fdl-appendix",

    },
    "de" : { 
        "ch01": "ch_oview",
        "ch02": "ch_basics",
        "ch03": "ch_accts",
        "ch04": "ch_txns",
        "ch05": "ch_loans",
        "ch06": "ch_capgain",
        "ch07": "ch_oth_assets",
        "glossary": "glossary",
        "index": "index",
        "appa": "appendixe",
    }
}

help_chapter_names = {
    "ch01": "Help_ch_Intro",
    "ch02": "Help_ch_GettingHelp",
    "ch03": "Help_sh_GettingStarted",
    "ch04": "Help_ch_GUIMenus",
    "ch05": "Help_ch_Account-Actions",
    "ch06": "Help_ch_Transactions",
    "ch07": "Help_ch_Business",
    "ch08": "Help_ch_Tools_Assistants",
    "ch09": "Help_ch_Reports",
    "ch10": "Help_ch_Customize",
    "appa": "Help_tips_appendix",
    "appb": "Help_fdl-appendix"
}

def runCommand(cmd, workdir = "."):
    cwd = os.getcwd()
    os.chdir(workdir)
    quoted_parts = [ "'" + part + "'" if ' ' in part else part for part in cmd ]
    cmd_as_string = " ".join(quoted_parts)
    logging.info("running command: %s" % cmd_as_string)
    rc = subprocess.call(cmd)
    os.chdir(cwd)

    if rc != 0:
        logging.error("command '%s' failed: return code = %d" % (" ".join(cmd), rc))
        sys.exit(rc)

    return rc

def check_source_file(source_path):
    """ Do a couple of simple checks to confirm that we are given a DocBook XML file to process.
    : param source_path: the source file from the user
    """
    # Check for .xml extension
    if os.path.splitext(source_path)[1] != ".xml":
        logging.error("Expected input file '%s' to be an XML file." % source_path)
        sys.exit(1)
    # Check for DocBook XML DOCTYPE
    doctype_line = ""
    fp = open(source_path)
    for line in fp:
        if line.find("DOCTYPE") != -1:
                doctype_line = line[:-1]
                break
    fp.close()
    if doctype_line == "":
        logging.error("Expected to find DOCTYPE line in source file '%s'" % source_path)
        sys.exit(1)
    if doctype_line.find("DocBook") == -1:
        logging.error("Expected tp find 'DocBook' on DOCTYPE line in source file '%s'" % source_path)
        sys.exit(1)

def make_directories(dir_to_make):
    try: 
        os.makedirs(dir_to_make)
    except OSError, e:
        logging.error("Failed to make required directory \"%s\": %s" % (dir_to_make, e.strerror))
        sys.exit(e.errno)


def fix_docbook_file(docbook_file_path):
    """
    The docbook file generated by asciidoctor needs to have some entity information put in it.
    :param docbook_file_path:
    :return:
    """

    temp_path = docbook_file_path + ".tmp"
    outfp = open(temp_path, "w")
    infp = open(docbook_file_path, "r")

    for line in infp:
        if line.startswith("<book"):
            outfp.write("""
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [

<!-- HTML codes unknown to xmllint and xml2po: -->
<!ENTITY lsquo "‘">
<!ENTITY rsquo "’">
<!ENTITY mdash "—">
<!ENTITY ndash "–">
           ]>\n""")
        outfp.write(line)
    outfp.close()
    infp.close()

    runCommand(["mv", temp_path, docbook_file_path])

def rename_asciidoc_files(output_dir, doc_type, lang):
    """
    The files as generated out of the saxon conversion process have generic names like 'ch01.asciidoc'. We want
    to rename this to have the same names that the original Docbook files had, lie "ch_oview", and give them
    the ".asc" extension
    """
    chapter_names = guide_chapter_names[lang] if doc_type == "guide" else help_chapter_names
    asciidoc_files = [ path for path in os.listdir(output_dir) if path.endswith(".asciidoc") ]
    for afile in asciidoc_files:
        old_chapter, ext = os.path.splitext(afile)
        new_chapter = chapter_names.get(old_chapter, None)
        if new_chapter is None:
            logging.error("Could not find specific chapter name for generic chapter named '%s'" % old_chapter)
            sys.exit(1)
        runCommand([ "mv", output_dir + "/" + afile, output_dir + "/" + new_chapter + ".asc"])
        
def fix_book_file(book_file_path, doc_type, lang):
    """
    The generated Asciidoc book file needs a few fixes before the Docbook files can be generated:
    1. The book title needs to be moved to the first line of the file.
    2. The generic include file paths like "ch01.asciidoc" need to be change to specifc files like "ch_oview.asc"
    :param book_file_path: Path to the Asciidoc book file
    :return:
    """

    include_re = re.compile(r"""include::(.*).asciidoc""")

    temp_path = book_file_path + ".tmp"
    outfp = open(temp_path, "w")
    infp = open(book_file_path, "r")

    buf = list()
    title_state = 0

    chapter_names = guide_chapter_names[lang] if doc_type == "guide" else help_chapter_names

    for line in infp:
        if title_state == 0 and line.startswith("= "):
            title_state = 1
            outfp.write(line)
            outfp.write(":doctype: book\n")
            outfp.write(":docinfo:\n")
            outfp.write(":numbered!:\n")
            outfp.write(":experimental:\n")
            for line2 in buf:
                outfp.write(line2)
        if title_state == 2:
            match = re.match(include_re, line)
            if match:
                original_chapter = match.group(1)
                new_chapter = chapter_names.get(original_chapter, None)
                if new_chapter is None:
                    logging.error("Don't know how to convert chapter name '%s' to real chapter in book file '%s'" %
                                  (original_chapter, book_file_path))
                    sys.exit(1)
                line = line.replace(original_chapter, new_chapter)
                line = line.replace(".asciidoc", ".asc")
            outfp.write(line)
        elif title_state == 1:
            title_state = 2
        else:
            buf.append(line)
    outfp.write("\n")
    infp.close()
    outfp.close()

    runCommand(["mv", temp_path, book_file_path])

def main(args):

    # Make output directory

    logging.basicConfig(level = logging.DEBUG)

    # The source file is the top level Gnucash DocBook file, like guide/C/gnucash-guide.xml
    source_file = args[1]

    basename = os.path.basename(os.path.splitext(source_file)[0])
    source_dir = os.path.dirname(source_file)
    source_dir_parts = source_dir.split(os.path.sep)
    lang_dir = source_dir_parts[-1]
    doc_type = source_dir_parts[-2]

    # Run some basic checks of the input source file
    check_source_file(source_file)

    try:

        output_dir = doc_type + "-asc/" + lang_dir
        if not os.path.exists(output_dir):
            make_directories(output_dir)
        book_file = output_dir + "/gnucash-" + doc_type + ".asc"

        # Clean up the output directory before we begin

        runCommand(["rm", "-rf", output_dir + "/*.asc", output_dir + "/*.xml", output_dir + "/*.tmp"])

        basename = os.path.basename(os.path.splitext(source_file)[0])

        output_file = output_dir + "/" + basename + ".asc"

        # Apply the stylesheet to the DocBook source file

        runCommand(["java", "-jar", "lib/saxon9he.jar", "-s", source_file,  "-o", output_file, "etc/d2a.xsl",
                    "chunk-output=true"])

        # rename the output files from generic names to GnuCash specific names
        rename_asciidoc_files(output_dir, doc_type, lang_dir)

        # rename the generated docinfo file
        runCommand(["mv", output_dir + "/book-docinfo.xml", output_dir + "/" + basename + "-docinfo.xml"])

        # Because the we changed the name of the chapters, fix the 'book' file to point to the right chapter files

        if not os.path.exists(book_file):
            logging.error("Book file '%s' was not created." % book_file)
            sys.exit(1)

        fix_book_file(book_file, doc_type, lang_dir)

        # now use asciidoc to generate docbook
        runCommand(["asciidoctor", "-b", "docbook", "-d", "book", "gnucash-" + doc_type + ".asc"], workdir=output_dir)

        # generate a simple HTML file in the output directory as well
        runCommand(["asciidoctor", "gnucash-" + doc_type + ".asc"], workdir=output_dir)

        # need to fix up the generated docbook file
        fix_docbook_file(output_dir + "/gnucash-" + doc_type + ".xml")

        print("Done!")
    except RuntimeError, e:
        logging.error("Conversion process failed: %s" % e.strerror)
        sys.exit(e.errno)

if __name__ == "__main__":
    main(sys.argv)
            

